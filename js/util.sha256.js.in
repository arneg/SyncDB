/*
* A JavaScript implementation of the SHA256 hash function.
*
* FILE:	sha256.js
* VERSION:	0.8
* AUTHOR:	Christoph Bichlmeier <informatik@zombiearena.de>
*		Arne Goedeke <el+sha256@laramies.com>
*
* NOTE: This version is not tested thoroughly!
*
* Copyright (c) 2003, Christoph Bichlmeier
* Copyright (c) 2011, Arne Goedeke
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
* 3. Neither the name of the copyright holder nor the names of contributors
*    may be used to endorse or promote products derived from this software
*    without specific prior written permission.
*
* ======================================================================
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
* OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
* EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* SHA256 logical functions */
#define ROTR(n,x)	(((x) >>> (n)) | ((x) << (32 - (n))))
/* Add 32-bit integers with 16-bit operations (bug in some JS-interpreters: overflow) */
/*
    safe_add : function(x, y) {
	var lsw = (x & 0xffff) + (y & 0xffff);
	var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	return (msw << 16) | (lsw & 0xffff);
    }
*/
#define ADD(x, y)	(((x) + (y))&0xffffffff)
#define Sigma0(x)	(ROTR(2, (x)) ^ ROTR(13, (x)) ^ ROTR(22, (x)))
#define Sigma1(x)	(ROTR(6, (x)) ^ ROTR(11, (x)) ^ ROTR(25, (x)))
#define sigma0(x)	(ROTR(7, (x)) ^ ROTR(18, (x)) ^ ((x) >>> 3))
#define sigma1(x)	(ROTR(17, (x)) ^ ROTR(19, (x)) ^ ((x) >>> 10))
#define choice(x,y,z)	(((x) & (y)) ^ (~(x) & (z)))
#define majority(x,y,z) (((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
#define EXPAND(T1, W, j)	do {					      \
    var s1,s2;								      \
    s1 = (W)[((j)+14)&0x0f];						      \
    s2 = (W)[((j)+1)&0x0f];						      \
    (T1) += ((W)[(j)&0x0f] += sigma1(s1) + (W)[((j)+9)&0x0f] + sigma0(s2));   \
} while(0)
/** @namespace */
UTIL.SHA256 = {
    /* test if the JS-interpreter is working properly */
    self_test : function() {
	return (new UTIL.SHA256.Hash()).update("message digest").hex_digest() == "f7846f55cf23e14eebeab5b4e1550cad5b509e3348fbc4efa3a1413d393cb650";
    },
    /* Hash constant words K: */
    K256 : [
	    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ],
    /* Transform a 512-bit message block */
    transform : function(hash, W) {
	var a, b, c, d, e, f, g, h, T1, T2;

	/* Initialize registers with the previous intermediate value */
	a = hash[0];
	b = hash[1];
	c = hash[2];
	d = hash[3];
	e = hash[4];
	f = hash[5];
	g = hash[6];
	h = hash[7];

        for(var j=0; j<64; j++) {
		T1 = h + Sigma1(e) + choice(e, f, g) + UTIL.SHA256.K256[j];
		if(j < 16) T1 += W[j];
		else EXPAND(T1, W, j);
		T2 = Sigma0(a) + majority(a, b, c);
		h = g;
		g = f;
		f = e;
		e = ADD(d, T1);
		d = c;
		c = b;
		b = a;
		a = ADD(T1, T2);
        }

	// can this overflow and also possibly overflow to something above 2^53 which would
	// lead to completely fucked up results.
	/* Compute the current intermediate hash value */
	hash[0] += a;
	hash[1] += b;
	hash[2] += c;
	hash[3] += d;
	hash[4] += e;
	hash[5] += f;
	hash[6] += g;
	hash[7] += h;

	return hash;
    },
    /* Read the next chunk of data and update the SHA256 computation */
    low_update : function(hash, data, len) {
	var curpos = 0;
	var W = new Array(16);

	if (UTIL.arrayp(data)) {
	    if (data.length == 64) {
                for(var j=0; j<16; j++) {
			W[j] = (data[curpos] << 24)
			     | (data[curpos+1] << 16)
			     | (data[curpos+2] << 8)
			     | (data[curpos+3]);
			curpos+=4;
		}
		return UTIL.SHA256.transform(hash, W);
	    } else if (data.length == 16) {
		return UTIL.SHA256.transform(hash, data);
	    }
	/* Transform as many times as possible */
	} else {
	    for(var i=0; i+63<len; i+=64) {
		for (var j=0; j<16; j++) {
			W[j] = (data.charCodeAt(curpos) << 24)
			     | (data.charCodeAt(curpos+1) << 16)
			     | (data.charCodeAt(curpos+2) << 8)
			     | (data.charCodeAt(curpos+3));
			curpos+=4;
		}
		UTIL.SHA256.transform(hash, W);
	    }
	    return hash;
	}

	UTIL.error("Bad argument to low_update.");
    },
    /* Finish the computation by operations such as padding */
    low_final : function(hash, data, len) {
	var t;
	len*=8;

        if (data.length <= 56) {
		t = new Array(64 - data.length);
	} else {
		t = new Array(128 - data.length);
	}
	t[0] = 0x80;

	for (var i = 0; i < 4; i++)
	    t[t.length-1-i] = (len>>>(i*8))&0xff;
	data += String.fromCharCode.apply(window, t);

	return UTIL.SHA256.low_update(hash.concat(), data, data.length);
    }
};
UTIL.SHA256.Hash = UTIL.Hash.extend(
    /** @lends UTIL.SHA256.Hash */
    {
    /**
     * @constructs UTIL.SHA256.Hash 
     * @augments UTIL.Hash
     */
    constructor : function() {
	this.init();
    },
    block_bytes : 64,
    /* Initialise the SHA256 computation */
    init : function() {
	this.ihash = [
	    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
	    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	];
	this.final = 0;
	this.length = 0;
	this.buf = "";
    },
    update : function(data) {
	this.final = null;

	if (UTIL.stringp(data)) {
	    this.length += data.length;
	    this.buf += data;
	    if (this.buf.length >= 64) {
		UTIL.SHA256.low_update(this.ihash, this.buf,
				       (this.buf.length)&0xffffffc0);
		this.buf = this.buf.substr(this.buf.length&0xffffffc0);
	    }
	} else if (this.buf.length) {
	    UTIL.error("Using Hash in string mode already.\n");
	} else {
	    this.length += 64;
	    UTIL.SHA256.low_update(this.ihash, data);
	}

	return this;
    },
    digest : function() {
	if (!this.final)
	    this.final = UTIL.SHA256.low_final(this.ihash, this.buf,
					       this.length);
        return this.final.concat();
    }
});
