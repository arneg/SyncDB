CONCEPTS ====================
Schema hashing:
    * use the atom encoding for the schema
    * sign code (the schema using the private key
		 of the distributer)
    * check signature, by hashing the schema and
      checking the signature using public key of
      distributer

// THIS is called entanglement


JS      ================
     SyncDB.LocalTable
         - add support for indexing
            * a mapping (int and string are okay to use for js objects directly)
            * store this serialized in a different global localStorage slot. this
              would be a subclass of SyncDB.LocalField
     SyncDB.MeteorTable(Meteor.Channel)
         - use multiplexing transport
         - protocol would be RPC


 PIKE    ================
     schema = SyncDB.Schema("contacts", {
         // here be dragons
         "id" : SyncDB.Types.Integer(SyncDB.Flags.Key()),
         "fullname" : SyncDB.Types.String(SyncDB.MySQL.Join("id", "contacts.id"), SyncDB.MySQL.Fetch("users.fullname")),
         "email" : SyncDB.Types.String(SyncDB.Flags.Hash(SHA256)),
         "interests" : SyncDB.Types.Array(SyncDB.Types.String(), SyncDB.MySQL.Fetch("user_interests.interest"), SyncDB.MySQL.Join("id", "user_interests.user_id")),
	 "lifespan" : SyncDB.Types.Range(SyncDB.Types.Date(), SyncDB.MySQL.Fetch("contacts.birth", "contacts.death"))
     });
     SyncDB.MeteorTable(name, schema, SyncDB.MySQL.Table(mysql_connection));
     SyncDB.MeteorTable(name, schema, SyncDB.CurveCP.Table("sldkjfsldkjfalksdjflksjadfkljsadrwerklwejf.webhaven.eu:4404"));

     class Undef {
	inherit Base;

	Base `|(Base o) {
	    return Or(this, o);
	}

	Base `&(Base o) {
	    return And(this, o);
	}
     }

     class List {
	Base diff_type;
	void create(Base type) {
	    diff_type = Mapping(Integer(), type|Undef);
	}
	Serialization.Atom diff(array a, array b) {
	    mapping diff = ([]);
	    int i;

	    for (i = 0; i < min(sizeof(a), sizeof(b)); i++) {
		if (a[i] != b[i]) diff[i] = b[i];
	    }

	    if (sizeof(a) < sizeof(b)) {
		for (i; i < sizeof(b), i++) diff[i] = b[i];
	    } else {
		diff[i] = undef;
	    }

	    return diff_type->encode(diff);
	}

	array apply(array a, Serialization.Atom atom) {
	    mapping diff = diff_type->decode(atom);
	    array indices = sort(indices(diff));
	    for (int i = 0; i < sizeof(indices); i++) {
		if (diff[i] == undef) {
		    return a[0..i-1];
		}
		a[i] = diff[i];
	    }
	    return a;
	}
     }
    
     object o = Serialization.String();
     o->diff("foo", "bar") == Atom("_diff_string", "bar");
     o->apply("foo", o->diff("foo", "bar")) == "bar";
     object o = Serialization.List();
     o->diff(({ 0, 3, 4, 5 }), ({ 4, 3, 4, 9, 10 })) == Atom("_list_diff", ([ 0 : 4, 3 : 9, 4 : 10 ]));
     o->diff(({ 0, 3, 4, 5 }), ({ 4, 3, 4 })) == Atom("_list_diff", ([ 0 : 4, 3 : Serialization.undef, 4 : Serialization.undef ]));

ISSUES ============



